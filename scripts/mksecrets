#!/usr/bin/env bash
set -eo pipefail

mkid () {
  let path

  path="$1"

  openssl rand -base64 32 > "$path"
}

mkage () {  
  let path

  path="$1"

  age-keygen -o "$path.key" 2>&1 | \
    awk '{ print $3 }' > "$path.pub"
}

mkssh () {
  let path
  let comment

  if [[ "x$2" == "x" ]]
  then
    path="$1"

    ssh-keygen -q -a 100 -t ed25519  -N "" \
      -f "$path" 
  else
    path="$1"
    comment="$2"

    ssh-keygen -q -a 100 -t ed25519  -N "" \
      -C "$comment" \
      -f "$path" 
  fi
}

mkssl () {
  let path
  let ca
  let subj

  if [[ "x$3" == "x" ]]
  then
    path="$1"
    subj="$2"

    openssl genpkey -algorithm ED25519 \
      -out "$path.key"
    openssl req -x509 \
      -key "$path.key" \
      -out "$path.crt" \
      -subj "/CN=$subj" \
      -days 3650
  else
    path="$1"
    ca="$2"
    subj="$3"
   
    openssl genpkey -algorithm ED25519 \
      -out "$path.key"
    openssl req -new \
      -key "$path.key" \
      -out "$path.csr" \
      -subj "/CN=$subj"
    openssl x509 -req \
      -in "$path.csr" \
      -CA "$ca.crt" \
      -CAkey "$ca.key" \
      -CAcreateserial \
      -out "$ca.crt" \
      -days 3650
  fi
}

indent() {
  let text
  let amount

  text="$1"
  amount="$2"

  printf "%b" "$text" | \
    sed -z "s/\\n/,/g;s/,/\\n$(printf "%${amount}s" "")/g"
}

SCRIPTS="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT="$(cd "$(dirname "$SCRIPTS")" && pwd)"
SECRETS="$ROOT/secrets"
mkdir -p "$SECRETS"

mkid "$SECRETS/id.txt"
cat "$SECRETS/id.txt" > "$SECRETS/$(cat "$SECRETS/id.txt")/id.txt"
mkid "$SECRETS/$(cat "$SECRETS/id.txt")/api.key"
mkid "$SECRETS/$(cat "$SECRETS/id.txt")/password.key"
cat "$SECRETS/$(cat "$SECRETS/id.txt")/password.key" > "$SECRETS/password.key"

mkage "$SECRETS/pidgeon-age"
mkage "$SECRETS/$(cat "$SECRETS/id.txt")/secrets-age"
mkssh "$SECRETS/$(cat "$SECRETS/id.txt")/authorized" "$(cat "$SECRETS/id.txt") authorized"
cat "$SECRETS/$(cat "$SECRETS/id.txt")/authorized.pub" > "$SECRETS/authorized.pub"

if [[ ! -f "$SECRETS/root.key"  ]]
then
  mkssl "$SECRETS/root" "OZDS Root CA"
fi
mkssl "$SECRETS/ca" "$SECRETS/root" "$(cat "$SECRETS/id.txt") CA"
mkssl "$SECRETS/postgres" "$SECRETS/ca" "$(cat "$SECRETS/id.txt") postgres"

mkid "$SECRETS/$(cat "$SECRETS/id.txt")/postgres-postgres.key"
mkid "$SECRETS/$(cat "$SECRETS/id.txt")/postgres-pidgeon.key"
cat > "$SECRETS/passwords.sql" <<EOF
ALTER USER postgres WITH PASSWORD '$(cat "$SECRETS/$(cat "$SECRETS/id.txt")/postgres-postgres.key")';
ALTER USER pidgeon WITH PASSWORD '$(cat "$SECRETS/$(cat "$SECRETS/id.txt")/postgres-pidgeon.key")';
EOF

cat > "$SECRETS/.env" <<EOF
PIDGEON_CLOUD_SSL="1"
PIDGEON_CLOUD_DOMAIN="TODO"
PIDGEON_CLOUD_API_KEY="$(cat "$SECRETS/$(cat "$SECRETS/id.txt")/api.key")"
PIDGEON_CLOUD_ID="$(cat "$SECRETS/id.txt")"

PIDGEON_DB_DOMAIN="localhost"
PIDGEON_DB_USER="pidgeon"
PIDGEON_DB_PASSWORD="$(cat "$SECRETS/$(cat "$SECRETS/id.txt")/postgres-pidgeon.key")"
PIDGEON_DB_NAME="pidgeon"

PIDGEON_NETWORK_IP_RANGE_START="192.168.1.0"
PIDGEON_NETWORK_IP_RANGE_END="192.168.1.255"
EOF

cat > "$SECRETS/secrets.yaml" <<EOF
.env: |
  $(indent "$(cat "$SECRETS/.env")" 2)
ca.key: |
  $(indent "$(cat "$SECRETS/ca.key")" 2)
ca.crt: |
  $(indent "$(cat "$SECRETS/ca.crt")" 2)
postgres.key: |
  $(indent "$(cat "$SECRETS/postgres.key")" 2)
postgres.crt: |
  $(indent "$(cat "$SECRETS/postgres.crt")" 2)
paswords.sql: |
  $(indent "$(cat "$SECRETS/passwords.sql")" 2)
EOF

sops --encrypt \
  --age "$(
    printf "%s,%s" \
      "$(cat "$SECRETS/pidgeon-age.pub")" \
      "$(cat "$SECRETS/$(cat "$SECRETS/id.txt")/secrets-age")"
  )" \
  "$SECRETS/secrets.yaml" > "$SECRETS/secrets.enc.yaml"
