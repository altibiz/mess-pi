#!/usr/bin/env bash
set -eo pipefail

ensure() {
  local path

  path="$1"

  if [[ -d "$path" ]]; then
    rm -rf "$path"
  else
    mkdir -p "$path"
  fi
}

SCRIPTS="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT="$(cd "$(dirname "$SCRIPTS")" && pwd)"
SECRETS="$ROOT/secrets"
mkdir -p "$SECRETS"
SYSTEM_SECRETS="$ROOT/src/system/secrets"
ensure "$SYSTEM_SECRETS"
TMP_SECRETS="$SECRETS/tmp"
ensure "$TMP_SECRETS"

ID="$(openssl rand -hex 16)"
NOW="$(date --utc -Iseconds)"
ID_SECRETS="$SECRETS/$NOW-$ID"
mkdir -p "$ID_SECRETS"
printf "%s" "$ID" >"$ID_SECRETS/id.txt"
cp "$ID_SECRETS/id.txt" "$SYSTEM_SECRETS/id.txt"
cp "$ID_SECRETS/id.txt" "$TMP_SECRETS/id.txt"

mktmp() {
  local name

  name="$1"

  cp "$ID_SECRETS/$name" "$TMP_SECRETS/$name"
  cp "$ID_SECRETS/$name" "$SYSTEM_SECRETS/$name"
}

mkid() {
  local name

  name="$1"

  openssl rand -base64 32 >"$ID_SECRETS/$name"
}

mkage() {
  local path

  name="$1"

  age-keygen -o "$ID_SECRETS/$name.key" 2>&1 |
    awk '{ print $3 }' >"$ID_SECRETS/$name.pub"
}

mkssh() {
  local name
  local comment

  if [[ "x$2" == "x" ]]; then
    name="$1"

    ssh-keygen -q -a 100 -t ed25519 -N "" \
      -f "$ID_SECRETS/$name"
  else
    name="$1"
    comment="$2"

    ssh-keygen -q -a 100 -t ed25519 -N "" \
      -C "$comment" \
      -f "$ID_SECRETS/$name"
  fi
}

mkssl() {
  local name
  local ca
  local subj

  if [[ "x$3" == "x" ]]; then
    name="$1"
    subj="$2"

    openssl genpkey -algorithm ED25519 \
      -out "$SECRETS/$name.key" >/dev/null 2>&1
    openssl req -x509 \
      -key "$SECRETS/$name.key" \
      -out "$SECRETS/$name.crt" \
      -subj "/CN=$subj" \
      -days 3650 >/dev/null 2>&1
  else
    name="$1"
    ca="$2"
    subj="$3"

    openssl genpkey -algorithm ED25519 \
      -out "$ID_SECRETS/$name.key" >/dev/null 2>&1
    openssl req -new \
      -key "$ID_SECRETS/$name.key" \
      -out "$ID_SECRETS/$name.csr" \
      -subj "/CN=$subj" >/dev/null 2>&1
    openssl x509 -req \
      -in "$ID_SECRETS/$name.csr" \
      -CA "$ca.crt" \
      -CAkey "$ca.key" \
      -CAcreateserial \
      -out "$ID_SECRETS/$name.crt" \
      -days 3650 >/dev/null 2>&1
  fi
}

indent() {
  local text
  local amount

  text="$1"
  amount="$2"

  printf "%b" "$text" |
    sed -z "s/\\n/,/g;s/,/\\n$(printf "%${amount}s" "")/g"
}

mkid "api.key"
mkid "password.key"
mktmp "password.key"

mkage "pidgeon-age"
mktmp "pidgeon-age.key"
mkage "secrets-age"
mkssh "authorized" "pidgeon-$ID authorized"
mktmp "authorized.pub"

if [[ ! -f "$SECRETS/root.key" ]]; then
  mkssl "root" "OZDS Root CA"
fi
mkssl "ca" "$SECRETS/root" "pidgeon-$ID CA"
mkssl "postgres" "$ID_SECRETS/ca" "pidgeon-$ID postgres"

mkid "postgres-postgres.key"
mkid "postgres-pidgeon.key"
cat >"$ID_SECRETS/passwords.sql" <<EOF
ALTER USER postgres WITH PASSWORD '$(cat "$ID_SECRETS/postgres-postgres.key")';
ALTER USER pidgeon WITH PASSWORD '$(cat "$ID_SECRETS/postgres-pidgeon.key")';
EOF

cat >"$ID_SECRETS/.env" <<EOF
PIDGEON_CLOUD_SSL="1"
PIDGEON_CLOUD_DOMAIN="TODO"
PIDGEON_CLOUD_API_KEY="$(cat "$ID_SECRETS/api.key")"
PIDGEON_CLOUD_ID="$ID"

PIDGEON_DB_DOMAIN="localhost"
PIDGEON_DB_USER="pidgeon"
PIDGEON_DB_PASSWORD="$(cat "$ID_SECRETS/postgres-pidgeon.key")"
PIDGEON_DB_NAME="pidgeon"

PIDGEON_NETWORK_IP_RANGE_START="192.168.1.0"
PIDGEON_NETWORK_IP_RANGE_END="192.168.1.255"
EOF

cat >"$ID_SECRETS/secrets.yaml" <<EOF
.env: |
  $(indent "$(cat "$ID_SECRETS/.env")" 2)
ca.key: |
  $(indent "$(cat "$ID_SECRETS/ca.key")" 2)
ca.crt: |
  $(indent "$(cat "$ID_SECRETS/ca.crt")" 2)
postgres.key: |
  $(indent "$(cat "$ID_SECRETS/postgres.key")" 2)
postgres.crt: |
  $(indent "$(cat "$ID_SECRETS/postgres.crt")" 2)
paswords.sql: |
  $(indent "$(cat "$ID_SECRETS/passwords.sql")" 2)
EOF

sops --encrypt \
  --age "$(
    printf "%s,%s" \
      "$(cat "$ID_SECRETS/pidgeon-age.pub")" \
      "$(cat "$ID_SECRETS/secrets-age.pub")"
  )" \
  "$ID_SECRETS/secrets.yaml" >"$ID_SECRETS/secrets.enc.yaml"
mktmp "secrets.enc.yaml"
